
application.secret = "{{ config.global_secret_key }}"
db.default.url="jdbc:postgresql://{{ config.load_balancing.slave.master_hostname if not config.load_balancing.is_master else 'localhost' }}:5432/ballot_box"
db.default.driver="org.postgresql.Driver"
db.default.user=ballot_box
db.default.pass="{{config.ballot_box.db_password}}"

app.datastore.public="/home/ballotbox/datastore/public"
app.datastore.private="/home/ballotbox/datastore/private"
applyEvolutions.default=true

app.api.root="http://{{config.ballot_box.domain}}:{{config.ballot_box.port}}"
app.datastore.root="http://{{config.ballot_box.domain}}:{{config.ballot_box.port}}"
app.datastore.ssl_root="https://{{config.ballot_box.domain}}:{{config.ballot_box.ssl_port}}"

app.api.max_revotes={{config.ballot_box.max_revotes}}
app.download_tally_timeout={{config.ballot_box.download_tally_timeout}}
app.download_tally_retries={{config.ballot_box.download_tally_retries}}

{% if config.ballot_box.enforce_state_controls %}
elections.enforceStateControls = true
{% else %}
elections.enforceStateControls = false
{% endif %}

app.callbacks = {
{% for callback in config.ballot_box.callbacks %}

    {% if 'vote' == callback.name %}
      {% if 'default' == callback.mode %}
    {{ callback.name }} = "http://127.0.0.1:10081/iam/api/auth-event/${eid}/successful_login/${uid}"{% if not loop.last %},{% endif %}
      {% elif 'custom' == callback.mode and callback.url %}
    {{ callback.name }} = "{{ custom.url }}"{% if not loop.last %},{% endif %}
      {% else %}
    {{ callback.name }} = ""{% if not loop.last %},{% endif %}
      {% endif %}
    {% else %}
      {% if 'default' == callback.mode %}
    {{ callback.name }} = "http://127.0.0.1:10081/iam/api/auth-event/${eid}/callback/"{% if not loop.last %},{% endif %}
      {% elif 'custom' == callback.mode and callback.url %}
    {{ callback.name }} = "{{ custom.url }}"{% if not loop.last %},{% endif %}
      {% else %}
    {{ callback.name }} = ""{% if not loop.last %},{% endif %}
      {% endif %}
    {% endif %}
{% endfor %}

}

{% if config.ballot_box.always_publish %}
app.always_publish=true
{% else %}
app.always_publish=false
{% endif %}

app.enable_multiple_tallies={% if config.enable_multiple_tallies %}true{% else %}false{% endif %}

# In big elections memory or disk buffer might need to be increased,
# specifically to upload the list of valid voterids if any filtering is going
# to be made, or when uploading the list of electors. This setting is
# applied at once to:
# play.http.parser.maxDiskBuffer (in ballot-box config)
# play.http.parser.maxMemoryBuffer (in ballot-box config)
# parsers.text.maxLength (in ballot-box config)
# client_max_body_size (in nginx)
play.http.parser.maxMemoryBuffer = {{config.http.max_body_size}}
play.http.parser.maxDiskBuffer = {{config.http.max_body_size}}
parsers.text.maxLength = {{config.http.max_body_size}}

app.partial-tallies=false

# tally-pipes can specify the pipelines whitelist
app.sequentResults.pipesWhitelist="/home/ballotbox/ballot-box/conf/pipes_whitelist"

# Generic election related constraints that apply to multiple parts of
# the deployment, for example the same limit might apply to iam,
#sequent-ui and ballot-box
election.limits {
  # maximum number of questions allowed in an election
  maxNumQuestions={{config.election_limits.max_num_questions}},

  # maximum number of allowed possible answers in a question
  maxNumAnswers={{config.election_limits.max_num_answers}},

  # maximum size in characters of long strings like url titles
  maxShortStringLength={{config.election_limits.max_short_string_length}},

  # maximum size in characters of long strings like question description
  maxLongStringLength={{config.election_limits.max_long_string_length}}
}

# When this setting is true, an election can be virtual and have
# subelections. A virtual election can have no votes itself and can move
# directly from created to calculated results state and the results
# calculation include the tallies of the subelections, so it can be used
# to consolide election results.
#
# Virtual elections have currently one limitation: ownership of the
# subelections is not checked, and that is why support for virtual elections
# is disabled by default and should only be enabled in dedicated
# installations.
{% if config.ballot_box.virtualElectionsAllowed %}
election.virtualElectionsAllowed=true
{% else %}
election.virtualElectionsAllowed=false
{% endif %}

app.authorities = {
{% for auth in config.authorities %}

  {{ auth.id }} = {
    name = "{{ auth.name }}",
    description = "{{ auth.description }}",
    url = "{{ auth.url }}",
    image = "{{ auth.image }}"
  }{% if not loop.last %},{% endif %}
{% endfor %}

}

app.trustee_users = {
{% for trustee in config.ballot_box.trustee_users %}

  {{ trustee.username }} = {
    authority_id = "{{ trustee.authority_id }}",
    password = "{{ trustee.password }}"
  }{% if not loop.last %},{% endif %}
{% endfor %}

}

app.eopeers.dir=/etc/eopeers/

elections.auth.secret="{{config.ballot_box.shared_secret}}"
elections.auth.expiry={{config.iam.auth_token_expiration_seconds}}
elections.auth.admin_expiry={{config.iam.admin_auth_token_expiration_seconds}}

ws.ssl {
  loose.disableHostnameVerification=true
  keyManager = {
    stores = [
      { type = "JKS", path = "/home/ballotbox/keystore.jks", password = "{{ config.ballot_box.keystore_pass }}" }
    ]
  }
  trustManager = {
    stores = [
      { type = "JKS", path = "/home/ballotbox/keystore.jks", password = "{{ config.ballot_box.keystore_pass }}" }
    ]
  }
}

# social networks buttons configuration
share_social {
  allow_edit = {% if config.sequent_ui.share_social.allow_edit %}true{% else %}false{% endif %},
  default = [
      {% for button in config.sequent_ui.share_social.default %}
      {
        network = "{{ button.network }}",
        button_text = "{{ button.button_text }}",
        social_message = "{{ button.social_message }}"
      }{% if not loop.last %},{% endif %}
      {% endfor %}
    ]
}

# memcached
ehcacheplugin=disabled
memcached.host="127.0.0.1:11211"
logger.memcached=WARN
app.cache.expiration_seconds = {{config.ballot_box.cache_expiration_seconds}}