# This file is part of deployment-tool.
# Copyright (C) 2014-2016  Sequent Tech Inc <legal@sequentech.io>

# deployment-tool is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License.

# deployment-tool  is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.

# You should have received a copy of the GNU Lesser General Public License
# along with deployment-tool.  If not, see <http://www.gnu.org/licenses/>.

---
- name: High Availability & Load Balancing [master], configure postgresql to accept external connections (from slaves)
  become: true
  become_user: postgres
  when: config.load_balancing.is_master
  lineinfile:
    dest: /etc/postgresql/12/main/pg_hba.conf
    line: "{{item}}"
    state: "{{ 'present' if config.load_balancing.is_master else 'absent'  }}"
  with_items:
    - "host    repmgr          repmgr  {{config.load_balancing.master.slave_cidr_address}}         trust"
    - "host    replication     repmgr  {{config.load_balancing.master.slave_cidr_address}}         trust"
    - "host    ballot_box ballot_box {{config.load_balancing.master.slave_cidr_address}}         md5"
    - "host    iam iam {{config.load_balancing.master.slave_cidr_address}}         md5"
    - "host    sentry sentry {{config.load_balancing.master.slave_cidr_address}}         md5"

- name: High Availability & Load Balancing [master], configure postgresql.conf
  become: true
  become_user: postgres
  when: config.load_balancing.is_master
  lineinfile:
    dest: /etc/postgresql/12/main/postgresql.conf
    line: "{{item.line}}"
    regexp: "{{item.rx}}"
    state: "{{ 'present' if config.load_balancing.is_master else 'absent'  }}"
  with_items:
    - line: "listen_addresses = '*'"
      rx: "listen_addresses[ \t]*="

    - line: "hot_standby = on"
      rx: "hot_standby[ \t]*="

    - line: "wal_level = 'hot_standby'"
      rx: "wal_level[ \t]*="

    - line: "max_wal_senders = 10"
      rx: "max_wal_senders[ \t]*="

    - line: "wal_keep_segments = 10"
      rx: "wal_keep_segments[ \t]*="

    - line: "archive_mode = on"
      rx: "archive_mode[ \t]*="

    - line: "archive_command = 'cd .'"
      rx: "archive_command[ \t]*="

- name: High Availability & Load Balancing, Start postgresql
  become: true
  service:
    name: postgresql
    state: restarted

- name: High Availability & Load Balancing, Create repmgr user
  become: true
  user:
    name: repmgr
    shell: /bin/bash
    home: /home/repmgr

- name: High Availability & Load Balancing, Creating /home/repmgr/.ansible/tmp dir
  become: true
  become_user: repmgr
  file:
    path: /home/repmgr/.ansible/tmp
    state: directory
    mode: '0700'

- name: High Availability & Load Balancing, Check if repmgr is installed
  shell: /usr/lib/postgresql/12/bin/repmgr --version
  register: repmgr_version
  ignore_errors: true

- name: High Availability & Load Balancing, Download repmgr
  become: true
  become_user: repmgr
  when: repmgr_version.rc != 0 or '5.2.1' not in repmgr_version.stdout
  get_url:
    url: https://github.com/2ndQuadrant/repmgr/archive/v5.2.1.tar.gz
    sha256sum: 8e6d104352ab4c12b8d923df51f581720b2303c44e2be98d56d4cf6aa9862772
    dest: /home/repmgr/repmgr.tar.gz
    validate_certs: "{{ not config.has_https_proxy }}"

- name: High Availability & Load Balancing, ensure repmgr extract directory empty to start clean build
  become: true
  become_user: repmgr
  when: repmgr_version.rc != 0 or '5.2.1' not in repmgr_version.stdout
  file:
    path: /home/repmgr/repmgr-5.2.1
    state: absent

- name: High Availability & Load Balancing, unarchive repmgr.tar.gz
  become: true
  become_user: repmgr
  when: repmgr_version.rc != 0 or '5.2.1' not in repmgr_version.stdout
  unarchive:
    copy: no
    src: /home/repmgr/repmgr.tar.gz
    dest: /home/repmgr/

- name: High Availability & Load Balancing, make install
  become: true
  become_user: root
  when: repmgr_version.rc != 0 or '5.2.1' not in repmgr_version.stdout
  shell:
    cmd: ./configure && make USE_PGXS=1 install
    chdir: /home/repmgr/repmgr-5.2.1/

- name: High Availability & Load Balancing [master], check if repmgr postgres user exists
  become: true
  become_user: postgres
  when: config.load_balancing.is_master
  register: repmgr_user_exists
  shell: psql postgres -tAc "SELECT 1 FROM pg_roles WHERE rolname='repmgr'"

- name: High Availability & Load Balancing [master], create repmgr postgres user
  become: true
  become_user: postgres
  when: "config.load_balancing.is_master and '1' not in repmgr_user_exists.stdout"
  postgresql_user:
    name: repmgr
    role_attr_flags: SUPERUSER
    state: present

- name: High Availability & Load Balancing [master], create repmgr postgres db
  become: true
  become_user: postgres
  when: config.load_balancing.is_master
  postgresql_db:
    name: repmgr
    owner: repmgr
    encoding: "utf-8"
    lc_collate: 'en_US.UTF-8'
    lc_ctype: 'en_US.UTF-8'
    template: 'template0'
    state: present

- name: High Availability & Load Balancing, creating /etc/repmgr
  become: true
  file:
    path: /etc/repmgr
    owner: root
    group: root
    mode: "755"
    state: directory

- name: High Availability & Load Balancing, creating repmgr.conf
  become: true
  file:
    path: /etc/repmgr/repmgr.conf
    owner: root
    group: root
    mode: "0644"
    state: touch

- name: High Availability & Load Balancing, configure repmgr.conf
  become: true
  lineinfile:
    dest: /etc/repmgr/repmgr.conf
    line: "{{item.line}}"
    state: present
    regexp: "{{item.regexp}}"
  with_items:
    - line: "node_id={{config.load_balancing.repmgr_node_id}}"
      regexp: "node_id=.*"
    - line: "node_name='{{config.hostname}}'"
      regexp: "node_name=.*"
    - line: "conninfo='host={{config.hostname}} user=repmgr dbname=repmgr'"
      regexp: "conninfo='host=.* user=repmgr dbname=repmgr'"
    - line: "data_directory='/var/lib/postgresql/12/main'"
      regexp: "data_directory='/var/lib/postgresql/12/main'"

- name: High Availability & Load Balancing, checking repmgr cluster state
  become: true
  become_user: postgres
  ignore_errors: true
  register: repmgr_cluster_show
  shell: /usr/lib/postgresql/12/bin/repmgr -f /etc/repmgr/repmgr.conf cluster show

- name: High Availability & Load Balancing [master], register the master
  become: true
  become_user: postgres
  when: config.load_balancing.is_master and repmgr_cluster_show.stdout.find(' primary | * running ') == -1
  shell: /usr/lib/postgresql/12/bin/repmgr -f /etc/repmgr/repmgr.conf master register
  register: register_master_cmd
  failed_when: "'server is in standby mode and cannot be registered as a master' not in register_master_cmd.stderr and register_master_cmd.rc != 0"

- name: High Availability & Load Balancing, checking repmgr cluster state after potentially registering the master
  become: true
  become_user: postgres
  ignore_errors: true
  register: repmgr_cluster_show
  shell: /usr/lib/postgresql/12/bin/repmgr -f /etc/repmgr/repmgr.conf cluster show

- name: High Availability & Load Balancing [master], promote to master
  become: true
  become_user: postgres
  when: config.load_balancing.is_master and (repmgr_cluster_show.stdout.find(' primary | * running ') == -1 or repmgr_cluster_show.stderr.find('[ERROR] connection to database failed') != -1) and not (repmgr_cluster_show.stdout | regex_search(' primary \| .* \| host=' + config.hostname  + ' user=repmgr dbname=repmgr'))
  shell: /usr/lib/postgresql/12/bin/repmgr -f /etc/repmgr/repmgr.conf --verbose --force standby promote

- name: High Availability & Load Balancing [slave], stopping postgresql
  become: true
  when: not config.load_balancing.is_master
  service:
    name: postgresql
    state: stopped

- name: High Availability & Load Balancing [slave], create the standby
  become: true
  become_user: postgres
  when: not config.load_balancing.is_master and not (repmgr_cluster_show.stdout | regex_search(' standby \| .* \| host=' + config.hostname + ' user=repmgr dbname=repmgr'))
  shell: "/usr/lib/postgresql/12/bin/repmgr -f /etc/repmgr/repmgr.conf --force -h {{config.load_balancing.slave.master_hostname}} -d repmgr -U repmgr --verbose standby clone"

- name: High Availability & Load Balancing [slave], started postgresql
  become: true
  when: not config.load_balancing.is_master
  service:
    name: postgresql
    state: started

- name: High Availability & Load Balancing [slave], register the standby
  become: true
  become_user: postgres
  when: not config.load_balancing.is_master and not (repmgr_cluster_show.stdout | regex_search(' standby \| .* \| host=' + config.hostname + ' user=repmgr dbname=repmgr'))
  shell: /usr/lib/postgresql/12/bin/repmgr -f /etc/repmgr/repmgr.conf --force standby register
