---
- name: High Availability & Load Balancing [master], configure postgresql to accept external connections (from slaves)
  sudo: true
  sudo_user: postgres
  when: config.load_balancing.is_master
  lineinfile:
    dest=/etc/postgresql/9.3/main/pg_hba.conf
    line="{{item}}"
    state="{{ 'present' if config.load_balancing.is_master else 'absent'  }}"
  with_items:
    - "host    repmgr          repmgr  {{config.load_balancing.master.slave_cidr_address}}         trust"
    - "host    replication     repmgr  {{config.load_balancing.master.slave_cidr_address}}         trust"
    - "host    agora_elections agora_elections {{config.load_balancing.master.slave_cidr_address}}         md5"
    - "host    authapi authapi {{config.load_balancing.master.slave_cidr_address}}         md5"
    - "host    sentry sentry {{config.load_balancing.master.slave_cidr_address}}         md5"

- name: High Availability & Load Balancing [master], configure postgresql.conf
  sudo: true
  sudo_user: postgres
  when: config.load_balancing.is_master
  lineinfile:
    dest=/etc/postgresql/9.3/main/postgresql.conf
    line="{{item.line}}"
    regexp="{{item.rx}}"
    state="{{ 'present' if config.load_balancing.is_master else 'absent'  }}"
  with_items:
    - line: "listen_addresses = '*'"
      rx: "listen_addresses[ \t]*="

    - line: "hot_standby = on"
      rx: "hot_standby[ \t]*="

    - line: "wal_level = 'hot_standby'"
      rx: "wal_level[ \t]*="

    - line: "max_wal_senders = 10"
      rx: "max_wal_senders[ \t]*="

    - line: "wal_keep_segments = 5000"
      rx: "wal_keep_segments[ \t]*="

    - line: "archive_mode = on"
      rx: "archive_mode[ \t]*="

    - line: "archive_command = 'cd .'"
      rx: "archive_command[ \t]*="

- name: High Availability & Load Balancing, Start postgresql
  sudo: true
  service: name=postgresql state=restarted

- name: High Availability & Load Balancing, Create repmgr user
  sudo: true
  user: name=repmgr shell=/bin/bash home=/home/repmgr

- name: High Availability & Load Balancing, Check if repmgr is installed
  register: repmgr
  shell: /usr/lib/postgresql/9.3/bin/repmgr --version
  register: repmgr_version
  ignore_errors: true

- name: High Availability & Load Balancing, Download repmgr
  sudo: true
  sudo_user: repmgr
  when: repmgr_version.rc != 0 or 'v3.0.2' not in repmgr_version.stdout
  get_url:
    url=https://github.com/2ndQuadrant/repmgr/archive/v3.0.2.tar.gz
    sha256sum=2feacd0edae0a4d1020952e2b59256fddb6b63b056186d71535785afff2f81a1
    dest=/home/repmgr/repmgr.tar.gz
    validate_certs={{ not config.has_https_proxy }}

- name: High Availability & Load Balancing, unarchive repmgr.tar.gz
  sudo: true
  sudo_user: repmgr
  when: repmgr_version.rc != 0 or 'v3.0.2' not in repmgr_version.stdout
  unarchive:
    copy=no
    src=/home/repmgr/repmgr.tar.gz
    dest=/home/repmgr/

- name: High Availability & Load Balancing, make install
  sudo: true
  sudo_user: root
  when: repmgr_version.rc != 0 or 'v3.0.2' not in repmgr_version.stdout
  shell: make USE_PGXS=1 install chdir=/home/repmgr/repmgr-3.0.2/

- name: High Availability & Load Balancing [master], check if repmgr postgres user exists
  sudo: true
  sudo_user: postgres
  when: config.load_balancing.is_master
  register: repmgr_user_exists
  shell: psql postgres -tAc "SELECT 1 FROM pg_roles WHERE rolname='repmgr'"

- name: High Availability & Load Balancing [master], create repmgr postgres user
  sudo: true
  sudo_user: postgres
  when: "config.load_balancing.is_master and '1' not in repmgr_user_exists.stdout"
  postgresql_user: name=repmgr role_attr_flags=SUPERUSER state=present

- name: High Availability & Load Balancing [master], create repmgr postgres db
  sudo: true
  sudo_user: postgres
  when: config.load_balancing.is_master
  postgresql_db:
    name=repmgr
    owner=repmgr
    encoding="utf-8"
    lc_collate='en_US.UTF-8'
    lc_ctype='en_US.UTF-8'
    template='template0'
    state=present

- name: High Availability & Load Balancing, creating /etc/repmgr
  sudo: true
  file:
    path="/etc/repmgr"
    owner="root"
    group="root"
    mode="755"
    state=directory

- name: High Availability & Load Balancing, creating repmgr.conf
  sudo: true
  file:
    path="/etc/repmgr/repmgr.conf"
    owner="root"
    group="root"
    mode="0644"
    state=touch

- name: High Availability & Load Balancing, configure repmgr.conf
  sudo: true
  lineinfile:
    dest=/etc/repmgr/repmgr.conf
    line="{{item}}"
    state=present
  with_items:
    - "cluster=agoraelections"
    - "node={{config.load_balancing.repmgr_node_id}}"
    - "node_name={{config.host}}"
    - "conninfo='host={{config.host}} user=repmgr dbname=repmgr'"
    - "pg_bindir=/usr/lib/postgresql/9.3/bin"

- name: High Availability & Load Balancing, checking repmgr cluster state
  sudo: true
  sudo_user: postgres
  ignore_errors: true
  register: repmgr_cluster_show
  shell: /usr/lib/postgresql/9.3/bin/repmgr -f /etc/repmgr/repmgr.conf cluster show

- name: High Availability & Load Balancing [master], register the master
  sudo: true
  sudo_user: postgres
  when: config.load_balancing.is_master and repmgr_cluster_show.stdout.find('* master  | host=') == -1
  shell: /usr/lib/postgresql/9.3/bin/repmgr -f /etc/repmgr/repmgr.conf master register
  register: register_master_cmd
  failed_when: "'server is in standby mode and cannot be registered as a master' not in register_master_cmd.stderr and register_master_cmd.rc != 0"

- name: High Availability & Load Balancing [master], promote to master
  sudo: true
  sudo_user: postgres
  when: config.load_balancing.is_master and (repmgr_cluster_show.stdout.find('* master  | host=') != -1 or repmgr_cluster_show.stderr.find('[ERROR] connection to database failed') != -1) and repmgr_cluster_show.stdout.find('* master  | host={{config.host}} ') == -1
  shell: /usr/lib/postgresql/9.3/bin/repmgr -f /etc/repmgr/repmgr.conf --verbose --force standby promote

- name: High Availability & Load Balancing [slave], stopping postgresql
  sudo: true
  when: not config.load_balancing.is_master
  service: name=postgresql state=stopped

- name: High Availability & Load Balancing [slave], create the standby
  sudo: true
  sudo_user: postgres
  when: not config.load_balancing.is_master and repmgr_cluster_show.stdout.find('  standby | host={{config.host}} user=repmgr dbname=repmgr') == -1
  shell: "/usr/lib/postgresql/9.3/bin/repmgr -f /etc/repmgr/repmgr.conf --force --rsync-only -h {{config.load_balancing.slave.master_hostname}} -d repmgr -U repmgr --verbose standby clone"

- name: High Availability & Load Balancing [slave], started postgresql
  sudo: true
  when: not config.load_balancing.is_master
  service: name=postgresql state=started

- name: High Availability & Load Balancing [slave], check node id
  sudo: true
  sudo_user: postgres
  register: repl_nodes
  when: not config.load_balancing.is_master
  shell: "psql repmgr -tAc 'select id,name from repmgr_agoraelections.repl_nodes;'"

- name: High Availability & Load Balancing [slave], fail if our node-id is repeated
  fail: msg="config.load_balancing.repmgr_node_id = {{config.load_balancing.repmgr_node_id}} is already being used by another node"
  when: not config.load_balancing.is_master and repl_nodes.stdout.find('{{config.load_balancing.repmgr_node_id}}|') != -1 and repl_nodes.stdout.find('{{config.load_balancing.repmgr_node_id}}|{{config.host}}') == -1

- name: High Availability & Load Balancing [slave], register the standby
  sudo: true
  sudo_user: postgres
  when: not config.load_balancing.is_master and repmgr_cluster_show.stdout.find('  standby | host={{config.host}} user=repmgr dbname=repmgr') == -1
  shell: /usr/lib/postgresql/9.3/bin/repmgr -f /etc/repmgr/repmgr.conf --force standby register
