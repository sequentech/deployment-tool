user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log {{ config.http.nginx_error_log_level }};
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    # Fixes the "Http Client cookie headers too large" problem:
    large_client_header_buffers 4 8k;

    #gzip  on;

    include /etc/nginx/conf.d/*.conf;

    upstream eorchestra {
        server unix:///tmp/eorchestra.sock;
    }

    server {
        listen  {{ config.election_orchestra.port }} ssl;
        server_name {{ config.hostname }};

        add_header Strict-Transport-Security max-age=31536000;
        ssl_verify_client on;
        ssl_client_certificate {{ config.http.tls_calist_path }};
        ssl_certificate     {{ config.http.tls_cert_path }};
        ssl_certificate_key {{ config.http.tls_cert_key_path }};

        # see:
        # https://raymii.org/s/tutorials/Pass_the_SSL_Labs_Test_on_NGINX_%28Mitigate_the_CRIME_and_BEAST_attack_-_Disable_SSLv2_-_Enable_PFS%29.html
        # https://blog.hasgeek.com/2013/https-everywhere-at-hasgeek
        ssl_session_cache       builtin:1000  shared:SSL:10m;
        ssl_session_timeout     5m;
        ssl_ecdh_curve          secp521r1;

        ssl_protocols           TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers       on;

        # The following is all one long line. We use an explicit list of ciphers to enable
        # forward secrecy without exposing ciphers vulnerable to the BEAST attack
        ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-RC4-SHA:ECDHE-RSA-RC4-SHA:ECDH-ECDSA-RC4-SHA:ECDH-RSA-RC4-SHA:ECDHE-RSA-AES256-SHA:RC4-SHA:HIGH:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXP:!CBC:!EDH:!kEDH:!PSK:!SRP:!kECDH;

        location /public_data {
            autoindex on;
            alias /srv/election-orchestra/server1/public;
        }


        location / {
            uwsgi_pass eorchestra;
            include /etc/nginx/uwsgi_params;

            uwsgi_param Host $http_host;
            uwsgi_param X-Real-IP $remote_addr;
            uwsgi_param X-Scheme $scheme;
            uwsgi_param X-Sender-SSL-Certificate $ssl_client_cert;
        }
    }
}
