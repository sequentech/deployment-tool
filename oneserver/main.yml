# This file is part of deployment-tool.
# Copyright (C) 2014-2016  Sequent Tech Inc <legal@sequentech.io>

# deployment-tool is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License.

# deployment-tool  is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.

# You should have received a copy of the GNU Lesser General Public License
# along with deployment-tool.  If not, see <http://www.gnu.org/licenses/>.

---
- name: OneServer, copy maintenance file if any
  when: config.http.maintenance_file != ''
  become: true
  template:
    src: "{{config.http.maintenance_file}}"
    dest: /usr/share/nginx/html/maintenance.html
    owner: root
    mode: 0644

- name: OneServer, copy default maintenance file
  when: config.http.maintenance_file == ''
  become: true
  template:
    src: oneserver/templates/maintenance.html
    dest: /usr/share/nginx/html/maintenance.html
    owner: root
    mode: 0644

- name: OneServer, iam custom_urls.py
  become: true
  template:
    src: oneserver/templates/custom_urls.py
    dest: /home/iam/iam/iam/custom_urls.py
    owner: iam
    mode: '0640'

- name: OneServer, iam url config
  become: true
  lineinfile:
    dest: /home/iam/iam/iam/iam/deploy.py
    line: "ROOT_URLCONF = 'custom_urls'"
    state: present

- name: OneServer, Restarting iam service
  become: true
  supervisorctl:
    name: "{{ item }}"
    state: restarted
  with_items:
    - iam
    - iam_celery
    - iam_celery_beat

- name: OneServer, All in one nginx
  become: true
  template:
    src: oneserver/templates/oneserver.conf
    dest: /etc/nginx/conf.d/oneserver.conf
    owner: root
    mode: '0640'

- name: OneServer, configure nginx
  become: true
  template:
    src: oneserver/templates/nginx.conf
    dest: /etc/nginx/nginx.conf
    owner: root
    mode: '0640'

- name: OneServer, cloudflare.conf
  become: true
  template:
    src: oneserver/templates/cloudflare.conf
    dest: /etc/nginx/cloudflare.conf
    owner: root
    mode: '0640'

- name: OneServer, configure cors
  become: true
  template:
    src: oneserver/templates/cors.conf
    dest: /etc/nginx/cors.conf
    owner: root
    mode: '0640'

- name: OneServer, remove nginx default
  become: true
  file:
    path: /etc/nginx/sites-enabled/default
    state: absent

- name: OneServer, secure.conf
  become: true
  template:
    src: "oneserver/templates/{{ item }}"
    dest: "/etc/nginx/{{ item }}"
    owner: root
    mode: '0640'
  with_items:
    - base_secure.conf
    - secure.conf
    - internal_secure.conf

# dnie & fnmt certs
- name: OneServer, DNIE and FNMT ca in nginx
  become: true
  template:
    src: oneserver/templates/dnie.conf
    dest: /etc/nginx/conf.d/dnie.conf
    owner: root
    mode: '0640'
  when: config.dnie_auth.allow

# remove the dnie conf when allow_dni is false, otherwise when changing
# from one configuration to the other we would be leaving files around
- name: OneServer, DNIE and FNMT ca in nginx (remove)
  become: true
  file:
    path: /etc/nginx/conf.d/dnie.conf
    state: absent
  when: not config.dnie_auth.allow

- name: OneServer, DNIE and FNMT ca
  become: true
  template:
    src: oneserver/templates/ca.crt
    dest: /srv/certs/dnie.ca.crt
  when: not config.dnie_auth.allow

- name: OneServer, DNIE and FNMT ca (remove)
  become: true
  file:
    path: /srv/certs/dnie.ca.crt
    state: absent
  when: not config.dnie_auth.allow

- name: OneServer, Restarting nginx
  become: true
  service:
    name: nginx
    state: restarted

- name: OneServer, http authentication passwords file (remove)
  become: true
  file:
    path: /etc/nginx/.htpasswd
    state: absent

- name: OneServer, http authentication passwords file (create)
  become: true
  shell: echo "{{item.user}}:$(openssl passwd -crypt {{item.password}})" >> /etc/nginx/.htpasswd
  when: config.http.http_auth
  with_items: "{{ config.http.http_auth }}"
